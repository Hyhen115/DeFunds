Using contract tester version 0.6.2
(1/3)🧬Compiling contract: allcontract_20980517_1745134084.sol
[✅PASS]Compilation
(2/3)🤖Generating test case for: allcontract_20980517_1745134084.sol
[✅PASS]Read contract
[ℹ️INFO] Contract file already exists in destination, skipping adjust.
[⚠️WARNING]No </think> tag found in input
[✅PASS]Test case generation
[✅PASS]Write test contract file
(3/3)🧪Running tests in allcontract_20980517_1745134084.t.sol
(🧪Attempt 1/3)
Compiling 1 files with Solc 0.8.28
Solc 0.8.28 finished in 776.11ms
Compiler run successful with warnings:
Warning (2072): Unused local variable.
   --> test/allcontract_20980517_1745134084.t.sol:109:9:
    |
109 |         uint256 ownerBalanceBefore = ownerAddr.balance;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^


Ran 9 tests for test/allcontract_20980517_1745134084.t.sol:ContractTest
[PASS] test_createCampaign_inFactory() (gas: 5844999)
Logs:
  Running test_createCampaign_inFactory

Traces:
  [5844999] ContractTest::test_createCampaign_inFactory()
    ├─ [0] console::log("Running test_createCampaign_inFactory") [staticcall]
    │   └─ ← [Stop] 
    ├─ [3543993] → new CrowdfundFactory@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 17479 bytes of code
    ├─ [0] VM::prank(PointEvaluation: [0x000000000000000000000000000000000000000A])
    │   └─ ← [Return] 
    ├─ [2246584] CrowdfundFactory::createCampaign("Factory Campaign", "Desc", 5000000000000000000 [5e18], 864001 [8.64e5], "Image")
    │   ├─ [1980698] → new Crowdfund@0x104fBc016F4bb334D775a19E8A6510109AC63E00
    │   │   └─ ← [Return] 9085 bytes of code
    │   ├─ emit CampaignCreated(campaignAddress: Crowdfund: [0x104fBc016F4bb334D775a19E8A6510109AC63E00], owner: PointEvaluation: [0x000000000000000000000000000000000000000A], name: "Factory Campaign")
    │   └─ ← [Stop] 
    ├─ [3277] CrowdfundFactory::getAllCampaigns() [staticcall]
    │   └─ ← [Return] [Campaign({ campaignAddress: 0x104fBc016F4bb334D775a19E8A6510109AC63E00, owner: 0x000000000000000000000000000000000000000A, name: "Factory Campaign", createTime: 1 })]
    ├─ [0] VM::assertEq(1, 1, "Factory should have one campaign") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] test_donate_success() (gas: 2154492)
Logs:
  Running test_donate_success

Traces:
  [2154492] ContractTest::test_donate_success()
    ├─ [0] console::log("Running test_donate_success") [staticcall]
    │   └─ ← [Stop] 
    ├─ [1980698] → new Crowdfund@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 9085 bytes of code
    ├─ [2513] Crowdfund::totalDonations() [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(0, 0, "Initial total donations should be zero") [staticcall]
    │   └─ ← [Return] 
    ├─ [112567] Crowdfund::donate{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [891] Crowdfund::donationAmounts(ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Donation amount not recorded correctly") [staticcall]
    │   └─ ← [Return] 
    ├─ [513] Crowdfund::totalDonations() [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Total donations should equal donated amount") [staticcall]
    │   └─ ← [Return] 
    ├─ [1055] Crowdfund::donators(0) [staticcall]
    │   └─ ← [Return] ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]
    ├─ [0] VM::assertEq(ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], "Donor not recorded correctly") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] test_donate_zero_shouldRevert() (gas: 2024948)
Logs:
  Running test_donate_zero_shouldRevert

Traces:
  [2024948] ContractTest::test_donate_zero_shouldRevert()
    ├─ [0] console::log("Running test_donate_zero_shouldRevert") [staticcall]
    │   └─ ← [Stop] 
    ├─ [1980698] → new Crowdfund@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 9085 bytes of code
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Must donate some ETH to donate)
    │   └─ ← [Return] 
    ├─ [743] Crowdfund::donate()
    │   └─ ← [Revert] revert: Must donate some ETH to donate
    └─ ← [Stop] 

[PASS] test_factory_togglePause() (gas: 3593552)
Logs:
  Running test_factory_togglePause

Traces:
  [3593552] ContractTest::test_factory_togglePause()
    ├─ [0] console::log("Running test_factory_togglePause") [staticcall]
    │   └─ ← [Stop] 
    ├─ [3543993] → new CrowdfundFactory@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 17479 bytes of code
    ├─ [862] CrowdfundFactory::togglePause()
    │   └─ ← [Stop] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  it is paused)
    │   └─ ← [Return] 
    ├─ [3205] CrowdfundFactory::createCampaign("Paused Campaign", "Desc", 5000000000000000000 [5e18], 864001 [8.64e5], "Image")
    │   └─ ← [Revert] revert: it is paused
    └─ ← [Stop] 

[PASS] test_proposeDeadlineExtension_success() (gas: 2228918)
Logs:
  Running test_proposeDeadlineExtension_success

Traces:
  [2228918] ContractTest::test_proposeDeadlineExtension_success()
    ├─ [0] console::log("Running test_proposeDeadlineExtension_success") [staticcall]
    │   └─ ← [Stop] 
    ├─ [1980698] → new Crowdfund@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 9085 bytes of code
    ├─ [114567] Crowdfund::donate{value: 5000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [72795] Crowdfund::proposeDeadlineExtension(2)
    │   ├─ emit DeadlineExtensionProposed(_days: 2, voteEndTime: 259201 [2.592e5])
    │   └─ ← [Stop] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:   voting period now, cannot donate)
    │   └─ ← [Return] 
    ├─ [904] Crowdfund::donate{value: 100000000000000000}()
    │   └─ ← [Revert] revert: voting period now, cannot donate
    ├─ [492] Crowdfund::voteEndTime() [staticcall]
    │   └─ ← [Return] 259201 [2.592e5]
    ├─ [0] VM::assertEq(259201 [2.592e5], 259201 [2.592e5], "Vote end time incorrect") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] test_refund_success() (gas: 2165320)
Logs:
  Running test_refund_success

Traces:
  [2185220] ContractTest::test_refund_success()
    ├─ [0] console::log("Running test_refund_success") [staticcall]
    │   └─ ← [Stop] 
    ├─ [1980698] → new Crowdfund@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 9085 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000000b)
    │   └─ ← [Return] 
    ├─ [114567] Crowdfund::donate{value: 1000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::warp(172801 [1.728e5])
    │   └─ ← [Return] 
    ├─ [891] Crowdfund::donationAmounts(0x000000000000000000000000000000000000000b) [staticcall]
    │   └─ ← [Return] 1000000000000000000 [1e18]
    ├─ [0] VM::assertEq(1000000000000000000 [1e18], 1000000000000000000 [1e18], "Donation not recorded correctly") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000000b)
    │   └─ ← [Return] 
    ├─ [29124] Crowdfund::refund()
    │   ├─ [0] 0x000000000000000000000000000000000000000b::fallback{value: 1000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [891] Crowdfund::donationAmounts(0x000000000000000000000000000000000000000b) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(0, 0, "Donation amount should be reset after refund") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertApproxEqAbs(100000000000000000000 [1e20], 100000000000000000000 [1e20], 1) [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] test_voteAndConfirmDeadlineExtension_success() (gas: 2197919)
Logs:
  Running test_voteAndConfirmDeadlineExtension_success

Traces:
  [2277519] ContractTest::test_voteAndConfirmDeadlineExtension_success()
    ├─ [0] console::log("Running test_voteAndConfirmDeadlineExtension_success") [staticcall]
    │   └─ ← [Stop] 
    ├─ [1980698] → new Crowdfund@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 9085 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000000b)
    │   └─ ← [Return] 
    ├─ [114567] Crowdfund::donate{value: 5000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   └─ ← [Return] 
    ├─ [72795] Crowdfund::proposeDeadlineExtension(2)
    │   ├─ emit DeadlineExtensionProposed(_days: 2, voteEndTime: 259201 [2.592e5])
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000000b)
    │   └─ ← [Return] 
    ├─ [46238] Crowdfund::voteOnDeadlineExtension(true)
    │   ├─ emit Voted(voterAddr: 0x000000000000000000000000000000000000000b, voteFor: true, voteAmount: 5000000000000000000 [5e18])
    │   └─ ← [Stop] 
    ├─ [0] VM::warp(345601 [3.456e5])
    │   └─ ← [Return] 
    ├─ [537] Crowdfund::deadline() [staticcall]
    │   └─ ← [Return] 864001 [8.64e5]
    ├─ [4397] Crowdfund::confirmDeadlineExtension()
    │   ├─ emit DeadlineExtensionSuccess(deadline: 1036801 [1.036e6])
    │   └─ ← [Stop] 
    ├─ [537] Crowdfund::deadline() [staticcall]
    │   └─ ← [Return] 1036801 [1.036e6]
    ├─ [0] VM::assertEq(1036801 [1.036e6], 1036801 [1.036e6], "Deadline was not extended correctly") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

[PASS] test_voteReverts_whenAlreadyVoted() (gas: 2272399)
Logs:
  Running test_voteReverts_whenAlreadyVoted

Traces:
  [2272399] ContractTest::test_voteReverts_whenAlreadyVoted()
    ├─ [0] console::log("Running test_voteReverts_whenAlreadyVoted") [staticcall]
    │   └─ ← [Stop] 
    ├─ [1980698] → new Crowdfund@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 9085 bytes of code
    ├─ [0] VM::prank(0x000000000000000000000000000000000000000b)
    │   └─ ← [Return] 
    ├─ [114567] Crowdfund::donate{value: 5000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   └─ ← [Return] 
    ├─ [72795] Crowdfund::proposeDeadlineExtension(1)
    │   ├─ emit DeadlineExtensionProposed(_days: 1, voteEndTime: 259201 [2.592e5])
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000000b)
    │   └─ ← [Return] 
    ├─ [46238] Crowdfund::voteOnDeadlineExtension(true)
    │   ├─ emit Voted(voterAddr: 0x000000000000000000000000000000000000000b, voteFor: true, voteAmount: 5000000000000000000 [5e18])
    │   └─ ← [Stop] 
    ├─ [0] VM::prank(0x000000000000000000000000000000000000000b)
    │   └─ ← [Return] 
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  
already voted)
    │   └─ ← [Return] 
    ├─ [1735] Crowdfund::voteOnDeadlineExtension(true)
    │   └─ ← [Revert] revert: already voted
    └─ ← [Stop] 

[PASS] test_withdraw_success() (gas: 2183076)
Logs:
  Running test_withdraw_success

Traces:
  [2183076] ContractTest::test_withdraw_success()
    ├─ [0] console::log("Running test_withdraw_success") [staticcall]
    │   └─ ← [Stop] 
    ├─ [1980698] → new Crowdfund@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   └─ ← [Return] 9085 bytes of code
    ├─ [134638] Crowdfund::donate{value: 5000000000000000000}()
    │   └─ ← [Stop] 
    ├─ [884] Crowdfund::getState() [staticcall]
    │   └─ ← [Return] 1
    ├─ [0] VM::assertEq(1, 1, "Campaign should be successful") [staticcall]
    │   └─ ← [Return] 
    ├─ [467] Crowdfund::getContractBalance() [staticcall]
    │   └─ ← [Return] 5000000000000000000 [5e18]
    ├─ [0] VM::assertEq(5000000000000000000 [5e18], 5000000000000000000 [5e18], "Campaign contract balance incorrect") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::prank(ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   └─ ← [Return] 
    ├─ [8600] Crowdfund::withdraw()
    │   ├─ [41] ContractTest::receive{value: 5000000000000000000}()
    │   │   └─ ← [Stop] 
    │   └─ ← [Stop] 
    ├─ [467] Crowdfund::getContractBalance() [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::assertEq(0, 0, "Campaign contract should have zero balance after withdrawal") [staticcall]
    │   └─ ← [Return] 
    └─ ← [Stop] 

Suite result: ok. 9 passed; 0 failed; 0 skipped; finished in 2.43ms (1.80ms CPU time)

Ran 1 test suite in 1.28s (2.43ms CPU time): 9 tests passed, 0 failed, 0 skipped (9 total tests)

